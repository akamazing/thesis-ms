@inproceedings{Chen2003,
abstract = { When testing a program, correctly executed test cases are seldom explored further, even though they may carry useful information. Metamorphic testing proposes to generate follow-up test cases to check important properties of the target function. It does not need a human oracle for output prediction and comparison. In this paper, we highlight the basic concepts of metamorphic testing and some interesting extensions in the areas of program testing, proving, and debugging. Future research directions are also proposed.},
author = {Chen, T. Y. and Kuo, F. C. and Tse, T. H. and Zhou, Zhi Quan},
booktitle = {Proceedings - 11th Annual International Workshop on Software Technology and Engineering Practice, STEP 2003},
doi = {10.1109/STEP.2003.18},
isbn = {0769522181},
keywords = {Arithmetic,Australia Council,Computer science,Cryptography,Debugging,Humans,Information systems,Information technology,Software testing,System testing},
mendeley-groups = {Thesis},
pages = {94--100},
title = {{Metamorphic testing and beyond}},
year = {2004}
}
@article{Weyuker,
abstract = {A frequently invoked assumption in program testing is that there is an oracle (i.e. the tester or an external mechanism can accurately decide whether or not the output produced by a program is correct). A program is non-testable if either an oracle does not exist or the tester must expend some extraordinary amount of time to determine whether or not the output is correct. The reasonableness of the oracle assumption is examined and the conclusion is reached that in many cases this is not a realistic assumption. The consequences of assuming the availability of an oracle are examined and alternatives investigated. 1.},
author = {Weyuker, Elaine J.},
doi = {10.1093/comjnl/25.4.465},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Weyuker - Unknown - On Testing Non-testable Programs.pdf:pdf},
issn = {00104620},
journal = {Computer Journal},
mendeley-groups = {Thesis},
number = {4},
pages = {465--470},
title = {{On testing non-testable programs}},
volume = {25},
year = {1982}
}
@inproceedings{Nakajima2016,
abstract = {Machine learning programs are non-testable, and thus testing with pseudo oracles is recommended. Although metamorphic testing is effective for testing with pseudo oracles, identifying metamorphic properties has been mostly ad hoc. This paper proposes a systematic method to derive a set of metamorphic properties for machine learning classifiers, support vector machines. The proposal includes a new notion of test coverage for the machine learning programs; this test coverage provides a clear guideline for conducting a series of metamorphic testing.},
author = {Nakajima, S and Bui, H N},
booktitle = {2016 23rd Asia-Pacific Software Engineering Conference (APSEC)},
doi = {10.1109/APSEC.2016.049},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Nakajima, Bui - 2016 - Dataset Coverage for Testing Machine Learning Computer Programs.pdf:pdf},
isbn = {1530-1362},
issn = {1530-1362},
keywords = {Computers,Guidelines,Metamorphic Testing,Pseudo Oracles,Software testing,Support Vector Machines,Support vector machines,Systematics,Test Coverage,Training,dataset coverage,learning (artificial intelligence),machine learning classifiers,machine learning computer program testing,metamorphic testing,program testing,support vector machines},
mendeley-groups = {Thesis},
pages = {297--304},
title = {{Dataset Coverage for Testing Machine Learning Computer Programs}},
year = {2016}
}
@article{Segura2016,
abstract = {A test oracle determines whether a test execution reveals a fault, often by comparing the observed program output to the expected output. This is not always practical, for example when a program?s input-output relation is complex and difficult to capture formally. Metamorphic testing provides an alternative, where correctness is not determined by checking an individual concrete output, but by applying a transformation to a test input and observing how the program output ?morphs? into a different one as a result. Since the introduction of such metamorphic relations in 1998, many contributions on metamorphic testing have been made, and the technique has seen successful applications in a variety of domains, ranging from web services to computer graphics. This article provides a comprehensive survey on metamorphic testing: It summarises the research results and application areas, and analyses common practice in empirical studies of metamorphic testing as well as the main open challenges.},
author = {Segura, Sergio and Fraser, Gordon and Sanchez, Ana B. and Ruiz-Cortes, Antonio},
doi = {10.1109/TSE.2016.2532875},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Segura et al. - 2016 - A Survey on Metamorphic Testing.pdf:pdf},
isbn = {0098-5589},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Metamorphic testing,oracle problem,survey},
mendeley-groups = {Thesis},
number = {9},
pages = {805--824},
title = {{A Survey on Metamorphic Testing}},
volume = {42},
year = {2016}
}
@article{Xie2011,
address = {New York, NY, USA},
author = {Xie, Xiaoyuan and Ho, Joshua W K and Murphy, Christian and Kaiser, Gail and Xu, Baowen and Chen, Tsong Yueh},
doi = {10.1016/j.jss.2010.11.920},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Xie et al. - 2011 - Testing and Validating Machine Learning Classifiers by Metamorphic Testing.pdf:pdf},
issn = {0164-1212},
journal = {J. Syst. Softw.},
keywords = {Machine learning,Metamorphic testing,Oracle problem,Test oracle,Validation,Verification},
mendeley-groups = {Thesis},
month = {apr},
number = {4},
pages = {544--558},
publisher = {Elsevier Science Inc.},
title = {{Testing and Validating Machine Learning Classifiers by Metamorphic Testing}},
url = {http://dx.doi.org/10.1016/j.jss.2010.11.920},
volume = {84},
year = {2011}
}
@inproceedings{Xie2009,
abstract = {Many applications in the field of scientific computing - such as computational biology, computational linguistics, and others - depend on Machine Learning algorithms to provide important core functionality to support solutions in the particular problem domains. However, it is difficult to test such applications because often there is no "test oracle" to indicate what the correct output should be for arbitrary input. To help address the quality of such software, in this paper we present a technique for testing the implementations of supervised machine learning classification algorithms on which such scientific computing software depends. Our technique is based on an approach called "metamorphic testing", which has been shown to be effective in such cases. More importantly, we demonstrate that our technique not only serves the purpose of verification, but also can be applied in validation. In addition to presenting our technique, we describe a case study we performed on a real-world machine learning application framework, and discuss how programmers implementing machine learning algorithms can avoid the common pitfalls discovered in our study. We also discuss how our findings can be of use to other areas outside scientific computing, as well.},
author = {Xie, Xiaoyuan and Ho, Joshua and Murphy, Christian and Kaiser, Gail and Xu, Baowen and Chen, Tsong Yueh},
booktitle = {Proceedings - International Conference on Quality Software},
doi = {10.1109/QSIC.2009.26},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Xie et al. - 2009 - Application of metamorphic testing to supervised classifiers.pdf:pdf},
isbn = {9780769538280},
issn = {15506002},
mendeley-groups = {Thesis},
pmid = {21243103},
title = {{Application of metamorphic testing to supervised classifiers}},
year = {2009}
}
@article{Murphy,
abstract = {It is challenging to test machine learning (ML) applica-tions, which are intended to learn properties of data sets where the correct answers are not already known. In the absence of a test oracle, one approach to testing these ap-plications is to use metamorphic testing, in which proper-ties of the application are exploited to define transforma-tion functions on the input, such that the new output will be unchanged or can easily be predicted based on the original output; if the output is not as expected, then a defect must exist in the application. Here, we seek to enumerate and classify the metamorphic properties of some machine learn-ing algorithms, and demonstrate how these can be applied to reveal defects in the applications of interest. In addition to the results of our testing, we present a set of properties that can be used to define these metamorphic relationships so that metamorphic testing can be used as a general ap-proach to testing machine learning applications.},
author = {Murphy, Christian and Kaiser, Gail and Hu, Lifeng},
file = {:Users/akamazing/Library/Application Support/Mendeley Desktop/Downloaded/Murphy, Kaiser, Hu - Unknown - Properties of Machine Learning Applications for Use in Metamorphic Testing.pdf:pdf},
mendeley-groups = {Thesis},
title = {{Properties of Machine Learning Applications for Use in Metamorphic Testing}}
}
